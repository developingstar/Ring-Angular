.page-wrapper.resources
  #opportunity.content-wrapper
    ngx-loading([show]='isLoading') 
    form.form-group(#opportunityForm="ngForm" (ngSubmit)="saveOpportunity(opportunityForm.valid)" novalidate)
      .header-nav.fixed-header
        h1.headers
          | {{title}}
        .button-group(*ngIf="!approval()")
          button.save-button.feedback-btn(type='submit' [ngClass]="{'btn-disabled': readonly(), 'feedback-btn': !readonly()}" [disabled]="readonly()")
            span
              | Save
          button.cancel-button.feedback-btn((click)='goBack()' type='button') 
            span
              | Cancel 
        .button-group(*ngIf="approval()")
          button.save-button(type='button'  (click)='approve()' [ngClass]="{'btn-disabled': !canApprove, 'feedback-btn': canApprove}" [disabled]="!canApprove")
            span
              | Approve
          button.cancel-button((click)='reject()' type='button' [ngClass]="{'reject-disabled': !canApprove, 'feedback-btn': canApprove}" [disabled]="!canApprove") 
            span
              | Reject 
      .applicants-view.fixed-header(*ngIf="disabled && opportunity.users" (click)="gotoApplicants(opportunity.id)")
        | Applicants: {{opportunity.users.length}}         
        img.link-arrow(src="../assets/imgs/link-arrow.svg") 
      .form-content 
        .item-info
          .input-label
            | NAME
            .invalid-validation([hidden]="name.valid || (name.pristine && !opportunityForm.submitted)")
              | Name is required
          input.resources-input(name="name" [disabled]="disabled()" [ngClass]="{'disabled': disabled()}" [(ngModel)]="opportunity.title" #name="ngModel" required) 
        .item-info
          .input-label
            | ORGANIZATION
            .invalid-validation([hidden]="selectedOrganization.length > 0 || !opportunityForm.submitted")
              | Organization is required
          angular2-multiselect(
              name = 'organization'
              [data]='organizationList | async '
              [(ngModel)]='selectedOrganization'
              [settings]='organizationSelectSettings'
            )
        .item-info
          .input-label
            | DESCRIPTION
            .invalid-validation([hidden]="details.valid || (details.pristine && !opportunityForm.submitted)")
              | Description is required
          textarea.resources-textarea(rows="6" name="details" [disabled]="disabled()" [ngClass]="{'disabled': disabled()}" [(ngModel)]="opportunity.details"  #details="ngModel" required)
        .item-info
          .input-label
            | APPLICATION LINK
            .invalid-validation([hidden]="link.valid || (link.pristine && !opportunityForm.submitted)")
              | Application link is required
            .invalid-validation([hidden]="!opportunity.link || opportunity.link === '' || validURL(opportunity.link) || (link.pristine && !opportunityForm.submitted)")
              | Application link is not correct
          input.resources-input([(ngModel)]="opportunity.link" [disabled]="disabled()" type="email" [ngClass]="{'disabled': disabled()}" name="link" #link="ngModel" required)
        .item-info
          .input-label-dropdown
              | CAREERS
          angular2-multiselect(
            name = 'careers'
            [data]='careerList | async '
            [(ngModel)]='selectedCareers'
            [settings]='careerMultiSettings'
          )   
      .item-info
          .input-label-bold
            | HIGH SCHOOL(S)
          angular2-multiselect(
            name = 'schools'
            [data]='schoolList'
            [(ngModel)]='selectedSchools'
            [settings]='schoolMultiSettings'
          )
      .item-info.checkboxes([tooltip]="tooltip('Active')")
        input(type='checkbox' id='active' [(ngModel)]='opportunity.is_active' [disabled]="disabled()" name='active')
        label(for='active')
          | Active  


